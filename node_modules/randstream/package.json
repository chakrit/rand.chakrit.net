{
  "name": "randstream",
  "version": "0.3.0",
  "description": "A stream that emits endless series of random bytes, with proper backpressure support.",
  "main": "index.js",
  "bin": {
    "rand": "cli.js"
  },
  "scripts": {
    "test": "./cli.js | hexdump -v"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/chakrit/randstream.git"
  },
  "keywords": [
    "random",
    "stream"
  ],
  "author": {
    "name": "Chakrit Wichian",
    "email": "service@chakrit.net",
    "url": "http://chakrit.net"
  },
  "license": "BSD",
  "dependencies": {
    "readable-stream": "~0.3.1",
    "throttle": "~1.0.3"
  },
  "readme": "\n# RANDSTREAM\n\nA stream that sprays out [random bytes][0] at whoever's listening to its `data`.\n\nThe implementation is surprisingly trivial thanks to [isaacs/readable-stream][1] so I\ndidn't have any tests but you should just take a look at the code.\n\n# API\n\nThe exported `RandStream` class accepts a single option hash which is passed along as an\n[option to the inherited `Readable` class][2] with an exception of a few extra parameters:\n\n```js\nvar RandStream = require('randstream');\n\nvar firehose = new RandStream(\n  { mode: 'alpha'\n  , defaultSize: 4096\n  });\n\nfirehose.pipe(process.stdout);\n```\n\nThe `mode` option maybe one of the following value:\n\n* `0` - A zero-filled streams. Essentially no longer random.\n* `01` - A zero-one stream. Useful to use as test streams that is a bit less boring :p\n* `random` - Default mode, using [`crypto.randomBytes`][0] to generate data. The buffer is\n  then pushed any reading clients untouched.\n* `pseudo` - Uses [`crypto.pseudoRandomBytes`][3] instead.\n* `alpha` - A stream of lowercase alphabets. Useful if you want to see the bytes being\n  piped. The original sequence is generated using [`crypto.randomBytes`][0].\n* `num` - Like `alpha` but generate a stream of digits.\n\nThe `defaultSize` is the default size of the buffer to allocate when the underlying\n`_read` implementation is not given a size.\n\n# CLI\n\nThis module can also be used from the command line if you install globally with `-g`\n\n```sh\n$ npm install -g randstream\n$ rand | hexdump -v\n```\n\n# LICENSE\n\npublic domain.\n\n[0]: http://nodejs.org/api/crypto.html#crypto_crypto_randombytes_size_callback\n[1]: https://github.com/isaacs/readable-stream\n[2]: https://github.com/isaacs/readable-stream#new-streamreadableoptions\n[3]: http://nodejs.org/api/crypto.html#crypto_crypto_pseudorandombytes_size_callback\n\n",
  "readmeFilename": "README.md",
  "_id": "randstream@0.3.0",
  "_from": "randstream@~0.3.0"
}
